# 425-
代码库
import torch
from torch import nn
from torch.nn import functional as F
from d2l import torch as d2l

class Inception(nn.Module):
    '''
    # `c1`--`c4` 是每条路径的输出通道数
    '''
    def __init__(self, in_channels, c1, c2, c3, c4, **kwargs):
        super(Inception, self).__init__(**kwargs)
        # 线路1，单1 x 1卷积层
        self.p1_1 = nn.Conv2d(in_channels, c1, kernel_size=1)
        # 线路2，1 x 1卷积层后接3 x 3卷积层
        self.p2_1 = nn.Conv2d(in_channels, c2[0], kernel_size=1)
        self.p2_2 = nn.Conv2d(c2[0], c2[1], kernel_size=3, padding=1)
        # 线路3，1 x 1卷积层后接5 x 5卷积层
        self.p3_1 = nn.Conv2d(in_channels, c3[0], kernel_size=1)
        self.p3_2 = nn.Conv2d(c3[0], c3[1], kernel_size=5, padding=2)
        # 线路4，3 x 3最⼤汇聚层后接1 x 1卷积层
        self.p4_1 = nn.MaxPool2d(kernel_size=3, stride=1, padding=1)
        self.p4_2 = nn.Conv2d(in_channels, c4, kernel_size=1)
        pass

    def forward(self, x):
        p1 = F.relu(self.p1_1(x))
        p2 = F.relu(self.p2_2(F.relu(self.p2_1(x))))
        p3 = F.relu(self.p3_2(F.relu(self.p3_1(x))))
        p4 = F.relu(self.p4_2(self.p4_1(x)))
        # 在通道维度上连结输出
        return torch.cat((p1, p2, p3, p4), dim=1)
    pass

b1 = nn.Sequential(nn.Conv2d(1, 64, kernel_size=7, stride=2, padding=3),
                   nn.ReLU(),
                   nn.MaxPool2d(kernel_size=3, stride=2, padding=1))
b2 = nn.Sequential(nn.Conv2d(64, 64, kernel_size=1),
                   nn.ReLU(),
                   nn.Conv2d(64, 192, kernel_size=3, padding=1),
                   nn.MaxPool2d(kernel_size=3, stride=2, padding=1))
b3 = nn.Sequential(Inception(192, 64, (96, 128), (16, 32), 32),
                   Inception(256, 128, (128, 192), (32, 96), 64),
                   nn.MaxPool2d(kernel_size=3, stride=2, padding=1))
b4 = nn.Sequential(Inception(480, 192, (96, 208), (16, 48), 64),
                   Inception(512, 160, (112, 224), (24, 64), 64),
                   Inception(512, 128, (128, 256), (24, 64), 64),
                   Inception(512, 112, (144, 288), (32, 64), 64),
                   Inception(528, 256, (160, 320), (32, 128), 128),
                   nn.MaxPool2d(kernel_size=3, stride=2, padding=1))
b5 = nn.Sequential(Inception(832, 256, (160, 320), (32, 128), 128),
                    Inception(832, 384, (192, 384), (48, 128), 128),
                    nn.AdaptiveAvgPool2d((1,1)),
                    nn.Flatten())
net = nn.Sequential(b1, b2, b3, b4, b5, nn.Linear(1024, 10))
X = torch.rand(size=(1, 1, 96, 96))
for layer in net:
    X = layer(X)
    print(layer.__class__.__name__,'output shape:\t', X.shape)
    pass



'''--------------------------训练模型---------------------------------'''
def main():

    lr, num_epochs, batch_size = 0.1, 2, 128
    train_iter, test_iter = d2l.load_data_fashion_mnist(batch_size, resize=96)

    def evaluate_accurancu_gpu(net, data_iter, device=None):
        '''
        预测准确率=预测正确的数量/预测的总样本数
        :param net:
        :param data_iter:
        :param device:
        :return:预测准确率
        '''

        if isinstance(net, torch.nn.Module):
            net.eval()  # 设置为评估模式
            if not device:
                device = next(iter(net.parameters())).device
                pass
            pass
        metric = d2l.Accumulator(2)  # 存放2个变量的累加器，1：预测正确的样本数量，2：总共预测的样本数量

        for X, y in data_iter:
            if isinstance(X, list):
                X = [x.to(device) for x in X]
                pass
            else:
                X = X.to(device)
                pass
            y = y.to(device)
            metric.add(d2l.accuracy(net(X), y), y.numel())
        return metric[0] / metric[1]

    def train_ch6(net, train_iter, test_iter, num_epochs, lr, device):
        '''
        训练函数，用GPU训练模型
        :param net:
        :param train_iter:
        :param num_epochs:
        :param lr:
        :param device:
        :return:
        '''
        def init_weights(m):
            '''
            随机初始化模型参数
            :param m:
            :return:
            '''
            if type(m) == nn.Linear or type(m) == nn.Conv2d:
                nn.init.xavier_uniform_(m.weight)
                pass
            pass

        net.apply(init_weights)       # 将初始化后的权重参数应用到模型
        print('training on', device)
        net.to(device)
        optimizer = torch.optim.SGD(net.parameters(), lr=lr)
        loss = nn.CrossEntropyLoss()   # nn.CrossEntropyLoss计算的是model输出结果中一个batch_size样本的loss均值。
        """Animator: 在动画中绘制数据。"""
        animator = d2l.Animator(xlabel='epoch', xlim=[1, num_epochs], legend=['train loss', 'train acc', 'test acc'])
        timer, num_batches = d2l.Timer(), len(train_iter)  # num_batches = batch_size = 128

        for epoch in range(num_epochs):
            metric = d2l.Accumulator(3)   # 训练损失之和，训练正确的数量，训练的总样本数
            net.train()   # 设置为train模式
            for i, (X, y) in enumerate(train_iter):
                '''X.shape = [128, 1, 224, 224], y.shape = [128]'''
                timer.start()
                optimizer.zero_grad()
                X, y = X.to(device), y.to(device)
                y_hat = net(X)       # 预测概率y_hat.shape = [128, 10]
                l = loss(y_hat, y)   # 误差函数, 动手学pytorch P117, 一个batch_size的均值
                l.backward()         # 反向传播
                optimizer.step()     # 更新梯度参数信息

                with torch.no_grad():
                    '''在该模块下，所有计算得出的tensor的requires_grad都自动设置为False,即不进行反向传播，节省内存和显存'''
                    # metric[0]=训练误差之和，metric[1]=训练正确的数量，metric[2]=训练的总样本数
                    metric.add(l * X.shape[0], d2l.accuracy(y_hat, y), X.shape[0])
                    pass
                timer.stop()
                train_l = metric[0] / metric[2]
                train_acc = metric[1] / metric[2]
                # 动态绘图，num_batches=batch_size
                if(i + 1) % (num_batches // 5) == 0 or i == num_batches - 1:
                    animator.add(epoch + (i + 1) / num_batches, (train_l, train_acc, None))  # 对训练误差，训练准确率进行动态绘图
                    pass
                pass
            test_acc = evaluate_accurancu_gpu(net, test_iter)
            animator.add(epoch + 1, (None, None, test_acc))   # 将测试准确率添加到动态绘图中去
            print(f'第{epoch + 1:.0f}轮训练，训练误差loss= {train_l:.3f}, 训练准确率train acc= {100 * train_acc:.3f}%, '
                  f'测试准确率test acc= {100 * test_acc:.3f}%')

        print(f'处理 {metric[2] * num_epochs / timer.sum():.1f} 个样本/秒 ' f'on {str(device)}')
        d2l.plt.show()
        pass

    train_ch6(net, train_iter, test_iter, num_epochs, lr, d2l.try_gpu())




if __name__ == '__main__':
    main()
